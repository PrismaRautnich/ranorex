///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace G4_TEST_POST_RILASCIO._02__Ispezione
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CheckDomandaIspezione recording.
    /// </summary>
    [TestModule("bc2f9d0d-40e6-4999-8008-d68074737502", ModuleType.Recording, 1)]
    public partial class CheckDomandaIspezione : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::G4_TEST_POST_RILASCIO.G4_TEST_POST_RILASCIORepository repository.
        /// </summary>
        public static global::G4_TEST_POST_RILASCIO.G4_TEST_POST_RILASCIORepository repo = global::G4_TEST_POST_RILASCIO.G4_TEST_POST_RILASCIORepository.Instance;

        static CheckDomandaIspezione instance = new CheckDomandaIspezione();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CheckDomandaIspezione()
        {
            CheckTarga = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CheckDomandaIspezione Instance
        {
            get { return instance; }
        }

#region Variables

        string _CheckTarga;

        /// <summary>
        /// Gets or sets the value of variable CheckTarga.
        /// </summary>
        [TestVariable("f29d9a44-07df-47db-b8b9-8fbadf53e04d")]
        public string CheckTarga
        {
            get { return _CheckTarga; }
            set { _CheckTarga = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_Form'", repo.ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_FormInfo, new ActionTimeout(120000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_FormInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Caption' from item 'ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_CheckTarga' and assigning its value to variable 'CheckTarga'.", repo.ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_CheckTargaInfo, new RecordItemIndex(1));
            CheckTarga = repo.ApplicationUnderTest.DomandaRevisione.Ispezione_StampaDomanda_CheckTarga.Element.GetAttributeValueText("Caption");
            Delay.Milliseconds(0);
            
            // Stesso item per chiudere il G4 ma penso che col focus lo capisca lui da solo quale chiudere
            Report.Log(ReportLevel.Info, "Mouse", "Stesso item per chiudere il G4 ma penso che col focus lo capisca lui da solo quale chiudere\r\nMouse Left Click item 'Chiusura.ChiudiG4' at Center.", repo.Chiusura.ChiudiG4Info, new RecordItemIndex(2));
            repo.Chiusura.ChiudiG4.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
